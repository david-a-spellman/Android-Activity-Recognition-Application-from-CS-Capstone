/*

This is old code for managing individual hash tables for collection, training, and inference
Left this in commented out in case at some point the design plan changed
Can be deleted later once design is finalized

public void addCollectionSensorData (SensorData sd) {
	if (this.removed_collection_keys.size () == 0) {
		this.collection_keys.add ("collection " + (this.collection_data_samples.size () + 1));
		this.collection_data_samples.put ("collection " + (this.collection_data_samples.size () + 1), sd);
	} else {
		Integer index = this.removed_collection_keys.firstKey ();
		int i = index.intValue ();
		this.collection_keys.set (i, this.removed_collection_keys.get (index));
		this.collection_data_samples.put (this.removed_collection_keys.get (index), sd);
		this.removed_collection_keys.remove (index);
	}
	return;
}

public void addTrainingSensorData (SensorData sd) {
	if (this.removed_training_keys.size () == 0) {
		this.training_keys.add ("training " + (this.training_data_samples.size () + 1));
		this.training_data_samples.put ("training " + (this.training_data_samples.size () + 1), sd);
	} else {
		Integer index = this.removed_training_keys.firstKey ();
		int i = index.intValue ();
		this.training_keys.set (i, this.removed_training_keys.get (index));
		this.training_data_samples.put (this.removed_training_keys.get (index), sd);
		this.removed_training_keys.remove (index);
	}
	return;
}

public void addInferenceSensorData (SensorData sd) {
	if (this.removed_inference_keys.size () == 0) {
		this.inference_keys.add ("inference " + (this.inference_data_samples.size () + 1));
		this.inference_data_samples.put ("inference " + (this.inference_data_samples.size () + 1), sd);
	} else {
		Integer index = this.removed_inference_keys.firstKey ();
		int i = index.intValue ();
		this.inference_keys.set (i, this.removed_inference_keys.get (index));
		this.inference_data_samples.put (this.removed_inference_keys.get (index), sd);
		this.removed_inference_keys.remove (index);
	}
	return;
}

public int getCollectionSize () {
	return this.collection_data_samples.size ();
}

public int getTrainingSize () {
	return this.training_data_samples.size ();
}

public int getInferenceSize () {
	return this.inference_data_samples.size ();
}


Will use an activity recognizer object to add a sensor data object to the correct hash table
This is also old code that uses multiple hash tables

public void addDataSample (SensorData sd, ActivityRecognizer ar) {
	switch (ar.getMode ()) {
		case Data_Collection: {
			this.addCollectionSensorData (sd);
			break;
		}
		case Training: {
			this.addTrainingSensorData (sd);
			break;
		}
		case Inference: {
			this.addInferenceSensorData (sd);
			break;
		}
	}
	return;
}
*/

/*

More old method versions
Methods for retrieving data samples by their string key

public SensorData getCollectionSensorData (String key) {
	return this.collection_data_samples.get (key);
}

public SensorData getTrainingSensorData (String key) {
	return this.training_data_samples.get (key);
}

public SensorData getInferenceSensorData (String key) {
	return this.inference_data_samples.get (key);
}

public List <String> getCollectionKeys () {
	return this.collection_keys;
}

public List <String> getTrainingKeys () {
	return this.training_keys;
}

public List <String> getInferenceKeys () {
	return this.inference_keys;
}

public String getCollectionKeyByIndex (int i) {
	return this.collection_keys.get (i);
}

public String getTrainingKeyByIndex (int i) {
	return this.training_keys.get (i);
}

public String getInferenceKeyByIndex (int i) {
	return this.inference_keys.get (i);
}

public int collectionSize () {
	return this.collection_keys.size ();
}

public int trainingSize () {
	return this.training_keys.size ();
}

public int inferenceSize () {
	return this.inference_keys.size ();
}

public void deleteCollectionDataSampleByIndex (int index) {
	String key = this.collection_keys.get (i);
	this.collection_data_samples.remove (key);
	this.removed_collection_keys.put (new Integer (index), key);
	this.collection_keys.set (index, "deleted");
	return;
}

public void deleteTrainingDataSampleByIndex (int index) {
	String key = this.training_keys.get (i);
	this.training_data_samples.remove (key);
	this.removed_training_keys.put (new Integer (index), key);
	this.training_keys.set (index, "deleted");
	return;
}

public void deleteInferenceDataSampleByIndex (int index) {
	String key = this.inference_keys.get (i);
	this.inference_data_samples.remove (key);
	this.removed_inference_keys.put (new Integer (index), key);
	this.inference_keys.set (index, "deleted");
	return;
}
*/

// This method changes the label type stored in the label list and will also replace the label name in the sample name with the name of the new label if the label was
// present in the sample name to begin with
// The method will return false if it was unable to change the name of the file to contain the new label name
// Otherwise if the method succeeds it returns true

public boolean changeSampleLabel (String key, String new_label) {
	String temp_new_label = new_label.replace (" ", "_");
	temp_new_label = temp_new_label.toLowerCase ();
	int index = this.sample_keys.getIndexOf (key);
	String label = this.sample_labels.get (index);
	String temp_label = label.replace (" ", "_");
	temp_label = temp_label.toLowerCase ();
	String new_key = key.replace (temp_label, temp_new_label);
	boolean renamed = this.renameSampleByName (key, new_key);
	if (renamed || !key.contains (temp_label)) {
		this.sample_labels.set (index, new_label);
		return true;
	} else {
		return false;
	}
}

/*

Methods for saving and loading DataModels out to disc and back
Previous versions

public void save (String filePath) {
	try {
		String key;
		SensorData sd;
		FileOutputStream fos = new FileOutputStream(filePath, false);
		ObjectOutputStream outputStream = new ObjectOutputStream(fos);
		this.activity_recognizer.save (outputStream);
		for (TreeMap.Entry <String, String> entry : this.collection_data_samples.entrySet ()) {
			key = entry.getKey ();
			sd = entry.getValue ();
			outputStream.writeObject(key);
			sd.save (outputStream);
		}
		for (TreeMap.Entry <String, String> entry : this.training_data_samples.entrySet ()) {
			key = entry.getKey ();
			sd = entry.getValue ();
			outputStream.writeObject(key);
			sd.save (outputStream);
		}
		for (TreeMap.Entry <String, String> entry : this.inference_data_samples.entrySet ()) {
			key = entry.getKey ();
			sd = entry.getValue ();
			outputStream.writeObject(key);
			sd.save (outputStream);
		}
		outputStream.close();
	} catch (IOException ex) {
		System.err.println(ex);
	}
	return;
}

public void load (String filePath) {
	try {
		String key;
		SensorData sd = new SensorData ();
		FileInputStream fin = new FileInputStream(filePath, false);
		ObjectInputStream inputStream = new ObjectInputStream(fin);
		if (inputStream.available () == 0) {
			inputStream.close ();
			return;
		}
		this.activity_recognizer.load (inputStream);
		if (inputStream.available () == 0) {
			inputStream.close ();
			return;
		}
		key = inputStream.readObject();
		sd.load (inputStream);
		while (key.contains ("collection")) {
			this.collection_data_samples.put (key, sd);
			this.collection_keys.add (key);
			if (inputStream.available () == 0) {
				break;
			}
			key = inputStream.readObject();
			sd = new SensorData ();
			sd.load (inputStream);
		}
		while (key.contains ("training")) {
			this.training_data_samples.put (key, sd);
			this.training_keys.add (key);
			if (inputStream.available () == 0) {
				break;
			}
			key = inputStream.readObject();
			sd = new SensorData ();
			sd.load (inputStream);
		}
		while (key.contains ("inference")) {
			this.inference_data_samples.put (key, sd);
			this.inference_keys.add (key);
			if (inputStream.available () == 0) {
				break;
			}
			key = inputStream.readObject();
			sd = new SensorData ();
			sd.load (inputStream);
		}
		inputStream.close();
	} catch (IOException ex) {
		System.err.println(ex);
	}
	return;
}
*/

